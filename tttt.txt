This is a sophisticated structure aimed at capturing the **50bps cut** view while taking advantage of the volatility dynamics around the FOMC meeting on **11/6/2024**. Let’s break it down and evaluate how well it meets your goals of profiting from a **50bps rate cut** while staying hedged and minimizing costs:

### Structure Breakdown:

1. **Long 11/6/2y ATM Receiver**:
   - **Directional Bet**: You're betting on a **50bps cut** by going long the 2-year receiver swaption that expires right after the FOMC meeting. If the Fed cuts **50bps**, the 2-year rate should drop significantly, making your receiver swaption valuable.

2. **Short 11/6/2y 25bps OTM Receiver as a Hedge**:
   - **Cost Reduction**: By selling an OTM receiver swaption (25bps below the current 2-year swap rate), you reduce the cost of the overall structure. You give up some of the upside, but the premium collected helps hedge against the structure being too expensive if the cut is smaller than expected.
   
   - **Risk**: This caps your upside beyond 25bps of rate cuts, but it’s a good way to balance cost versus directional exposure.

3. **Short 1m2y ATM Straddle**:
   - **Volatility Play**: The **upper left of the vol surface** (short expiry, short tenor) is overpriced, and selling this straddle helps you collect on the inflated implied volatility. If realized vol is lower than implied over the next month, this position will make money.

4. **Long 11/6/2y ATM Straddle**:
   - **Volatility Hedge**: The **upper right vol** (longer expiry, short tenor) is underpriced, so buying this straddle ahead of the FOMC allows you to benefit from the potential increase in volatility post-cut. If the Fed surprises the market with a **50bps cut**, realized volatility should spike, benefiting this long straddle position.

### Model Cost: **23bps**

This seems reasonably priced for a structure that gives you significant upside if the **50bps cut** occurs while hedging your cost through the OTM receiver sale and volatility plays.

### Risk-Reward Assessment:

1. **Upside**:
   - If the Fed cuts **50bps**, your long 2-year receiver swaption should gain substantially, especially with the protection from the ATM straddle, which will gain from the volatility spike post-FOMC.
   - The **short 1m2y ATM straddle** collects premium to hedge against overpriced volatility leading into the event.

2. **Downside**:
   - If the Fed cuts only **25bps**, the OTM receiver you sold limits your downside while still allowing some profit from the ATM receiver.
   - **Short vol risk**: The biggest risk lies in the short 1m2y ATM straddle. If realized volatility spikes unexpectedly before the FOMC, you could lose on that position. However, the **long 11/6/2y straddle** hedges some of this by profiting from a post-FOMC volatility surge.

3. **Break-even**: Your model shows a total cost of **23bps**, meaning you’ll need to see a rate cut that moves rates by more than that to start profiting. If the market prices a 25bps cut and you get a **50bps cut**, this structure should profit handsomely.

### Overall Evaluation:

- **Good Trade Structure**: This is a smart way to play the **50bps cut scenario**, while also taking advantage of the volatility mispricing in both the short and long expiries.
  
- **Hedge**: You’ve done well to hedge the downside by selling the OTM receiver and shorting the **overpriced short-term vol** with the straddle, though there is always some risk in selling volatility.

- **Key Risk**: The main risk is if **volatility spikes** pre-FOMC, affecting your short **1m2y straddle**, but this is mitigated by your **long 11/6 straddle** that kicks in post-FOMC.

### Final Thoughts:
This trade effectively balances **directional exposure** to a **50bps cut** with cost control through **volatility trades** and the **OTM receiver**. It’s a solid structure, but keep an eye on **pre-FOMC volatility** to avoid unexpected losses from the short straddle. If your **23bps pricing** holds, this is a well-balanced trade to pursue.


from openpyxl import load_workbook
from openpyxl.styles import Font, Alignment, Border, Side

# Specify the Excel file name and sheet name
file_name = 'your_file.xlsx'
sheet_name = 'NewSheet'

# Load the existing workbook
workbook = load_workbook(file_name)
sheet = workbook[sheet_name]

# Define the border style
thin_border = Border(left=Side(style='thin'),
                     right=Side(style='thin'),
                     top=Side(style='thin'),
                     bottom=Side(style='thin'))

# Center and add borders to every cell
for row in sheet.iter_rows():
    for cell in row:
        # Center the cell content
        cell.alignment = Alignment(horizontal='center', vertical='center')
        # Add border to the cell
        cell.border = thin_border

# Save the workbook
workbook.save(file_name)


import pandas as pd
from openpyxl import Workbook, load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import Font, PatternFill

# Example DataFrame
data = {
    'Column1': [1, 2, 3],
    'Column2': ['A', 'B', 'C'],
    'Column3': [10, 20, 30],
    'Column4': ['X', 'Y', 'Z']
}
df = pd.DataFrame(data)

# Specify the Excel file name and sheet name
file_name = 'your_file.xlsx'
sheet_name = 'NewSheet'

# Load an existing workbook or create a new one
try:
    workbook = load_workbook(file_name)
except FileNotFoundError:
    workbook = Workbook()

# Check if the sheet already exists and delete it if it does
if sheet_name in workbook.sheetnames:
    std = workbook[sheet_name]
    workbook.remove(std)

# Create a new sheet
sheet = workbook.create_sheet(title=sheet_name)

# Append the DataFrame to the new sheet starting from cell A1
for r in dataframe_to_rows(df, index=False, header=True):
    sheet.append(r)

# Formatting
header_font = Font(bold=True)
highlight_fill = PatternFill(start_color='ADD8E6', end_color='ADD8E6', fill_type='solid')  # Light blue fill

# Apply header formatting
for cell in sheet[1]:  # Assuming headers are in the first row
    cell.font = header_font
    cell.fill = highlight_fill

# Highlight the last column
last_column = sheet.max_column
for row in sheet.iter_rows(min_row=1, max_row=sheet.max_row):
    row[last_column - 1].fill = highlight_fill  # Adjusting for zero-based index

# Highlight the second-to-last column and make it bold
second_to_last_column = last_column - 1
header_cell = sheet.cell(row=1, column=second_to_last_column)
header_cell.font = Font(bold=True)  # Bold the header of the second-to-last column

for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):  # Skip header row
    row[second_to_last_column - 1].font = Font(bold=True)  # Bold the second-to-last column cells

# Highlight the last row
last_row = sheet.max_row
for cell in sheet[last_row]:
    cell.fill = highlight_fill

# Save the workbook
workbook.save(file_name)


import pandas as pd
from openpyxl import Workbook, load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# Example DataFrame
data = {
    'Column1': [1, 2, 3],
    'Column2': ['A', 'B', 'C']
}
df = pd.DataFrame(data)

# Specify the Excel file name and sheet name
file_name = 'your_file.xlsx'
sheet_name = 'NewSheet'

# Load an existing workbook or create a new one
try:
    workbook = load_workbook(file_name)
except FileNotFoundError:
    workbook = Workbook()

# Check if the sheet already exists and delete it if it does
if sheet_name in workbook.sheetnames:
    std = workbook[sheet_name]
    workbook.remove(std)

# Create a new sheet
sheet = workbook.create_sheet(title=sheet_name)

# Append the DataFrame to the new sheet starting from cell A1
for r in dataframe_to_rows(df, index=False, header=True):
    sheet.append(r)

# Save the workbook
workbook.save(file_name)
--


# Calculate the grand total for each volume type
grand_total_volume_type1 = df['VolumeType1'].sum()
grand_total_volume_type2 = df['VolumeType2'].sum()
grand_total_combined = grand_total_volume_type1 + grand_total_volume_type2

# Create a % of Grand Total row
percentage_row = pd.DataFrame({
    'AccountID': ['% of Grand Total'],
    'VolumeType1': [grand_total_volume_type1 / grand_total_combined * 100],
    'VolumeType2': [grand_total_volume_type2 / grand_total_combined * 100],
    'TotalVolume': [100],  # Total is always 100% for the % row
    '% of Grand Total': [100]  # This indicates the overall percentage
})

# Append the percentage row to the DataFrame
df_final = pd.concat([df, percentage_row], ignore_index=True)


import pandas as pd

# Example DataFrame with two volume columns
data = {'AccountID': [1, 2, 3, 4],
        'VolumeType1': [300000, 350000, 650000, 400000],
        'VolumeType2': [100000, 200000, 300000, 150000]}

df = pd.DataFrame(data)

# Step 1: Calculate the sum (Grand Total) for both volume columns combined
df['TotalVolume'] = df['VolumeType1'] + df['VolumeType2']

# Step 2: Calculate the grand total for the combined volume
grand_total_volume = df['TotalVolume'].sum()

# Step 3: Add a column for the percentage each account represents of the grand total
df['% of Grand Total'] = (df['TotalVolume'] / grand_total_volume) * 100

# Step 4: Create a "Grand Total" row
grand_total_row = pd.DataFrame({
    'AccountID': ['Grand Total'],
    'VolumeType1': [df['VolumeType1'].sum()],
    'VolumeType2': [df['VolumeType2'].sum()],
    'TotalVolume': [grand_total_volume],
    '% of Grand Total': [100]  # The Grand Total row should always be 100%
})

# Step 5: Append the Grand Total row to the DataFrame
df_final = pd.concat([df, grand_total_row], ignore_index=True)

# Display the final DataFrame
print(df_final)
---

import pandas as pd

# Example DataFrame
data = {'AccountID': [1, 2, 3, 4],
        'Volume': [300000, 350000, 650000, 400000]}
df = pd.DataFrame(data)

# Step 1: Calculate the sum (Grand Total) for numeric columns
grand_total = df.sum(numeric_only=True)

# Step 2: Convert the grand total into a row and append it
grand_total_row = pd.DataFrame(grand_total).T
grand_total_row['AccountID'] = 'Grand Total'

# Append the grand total row to the DataFrame
df_with_total = pd.concat([df, grand_total_row], ignore_index=True)

# Step 3: Add a column for the percentage each account represents of the total
total_volume = grand_total['Volume']
df_with_total['% of Total'] = (df_with_total['Volume'] / total_volume) * 100

# Step 4: Calculate percentage of total for each column and append it as a new row
percentage_row = (df_with_total.iloc[:-1, 1:] / total_volume) * 100  # Skip the Grand Total row to avoid division by itself
percentage_row = percentage_row.sum().to_frame().T  # Sum up for the entire row
percentage_row['AccountID'] = '% of Grand Total'

# Append the percentage row
df_final = pd.concat([df_with_total, percentage_row], ignore_index=True)

# Display the final DataFrame
print(df_final)
---


import os
from PyPDF2 import PdfReader, PdfWriter

# Path to the folder containing the PDFs
folder_path = 'path/to/your/pdf/folder'
output_pdf = 'filtered_merged_output.pdf'  # Name of the output merged PDF

# Create a PDF writer object to hold the merged content
writer = PdfWriter()

# Iterate over all files in the folder
for filename in os.listdir(folder_path):
    if filename.endswith('.pdf'):
        pdf_path = os.path.join(folder_path, filename)
        
        # Open each PDF file
        with open(pdf_path, 'rb') as pdf_file:
            reader = PdfReader(pdf_file)
            num_pages = len(reader.pages)

            # Logic for multi-page and single-page PDFs
            if num_pages > 1:
                # Iterate through each page and check for the text "term"
                for page_num in range(num_pages):
                    page = reader.pages[page_num]
                    page_text = page.extract_text()

                    # Include the page if it contains the word "term"
                    if "term" in page_text.lower():  # Case-insensitive search
                        writer.add_page(page)
            else:
                # If only one page, add it directly
                writer.add_page(reader.pages[0])

# Write the merged PDF to an output file
with open(output_pdf, 'wb') as output_file:
    writer.write(output_file)

print(f'Filtered merged PDF saved as {output_pdf}')

------

import xlwings as xw

# Open the Excel workbook
wb = xw.Book('your_file.xlsm')

# Access a specific sheet (by name or index)
sheet = wb.sheets['Sheet1']

# Modify the value of a specific cell (for example, A1)
sheet.range('A1').value = 'New Value'

# Refresh Bloomberg data by recalculating all Bloomberg formulas (equivalent to Ctrl + Alt + F9)
wb.app.api.Application.Run("blpRefreshAll")  # Calls Bloomberg refresh if Bloomberg API is loaded

# Alternatively, use Ctrl + Alt + F9 to fully recalculate all formulas, including Bloomberg
wb.app.api.SendKeys("^%{F9}")  # Ctrl + Alt + F9 for a full recalculation

# Trigger recalculation of all formulas in the workbook
wb.app.calculate()

# Save the workbook
wb.save()

# Close the workbook and quit the app
wb.close()
wb.app.quit()




import openpyxl
import win32com.client as win32

# Step 1: Open the Excel file and modify the specific cell
def modify_excel_cell(file_path, sheet_name, cell_ref, new_value):
    # Load the workbook and sheet
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook[sheet_name]
    
    # Modify the cell value
    sheet[cell_ref] = new_value
    
    # Save the changes
    workbook.save(file_path)
    workbook.close()

# Step 2: Refresh entire workbook with Bloomberg macro and recalculate sheets
def refresh_and_calculate(file_path):
    # Launch Excel and open the workbook
    excel_app = win32.Dispatch("Excel.Application")
    excel_app.Visible = False  # Keep Excel hidden in the background
    workbook = excel_app.Workbooks.Open(file_path)
    
    # Refresh the entire workbook (using the Bloomberg macro)
    excel_app.Run("RefreshEntireWorkbook")
    
    # Recalculate every sheet
    workbook.RefreshAll()  # Refresh data connections
    workbook.CalculateFull()  # Calculate all worksheets
    
    # Save and close the workbook
    workbook.Save()
    workbook.Close(False)
    excel_app.Quit()

# Example usage
file_path = "your_file.xlsx"
sheet_name = "Sheet1"
cell_ref = "A1"
new_value = "New Value"

# Modify the cell
modify_excel_cell(file_path, sheet_name, cell_ref, new_value)

# Refresh and calculate the entire workbook
refresh_and_calculate(file_path)

--

import openpyxl
import xlwings as xw

# Load the workbook using openpyxl
excel_file = "your_excel_file.xlsx"
wb = openpyxl.load_workbook(excel_file)

# Access Worksheet 1
ws1 = wb["Worksheet1"]
ws1["F2"] = "New Value"  # Change value of F2

# Save changes made with openpyxl
wb.save(excel_file)

# Now use xlwings to handle data refresh and calculation
app = xw.App(visible=False)  # Run in the background
wb_xw = app.books.open(excel_file)

# Access Worksheet 1
ws1_xw = wb_xw.sheets["Worksheet1"]
ws1_xw.api.RefreshAll()  # Refresh only Worksheet 1 data connections
ws1_xw.api.Calculate()   # Calculate Worksheet 1

# Access Worksheet 2
ws2_xw = wb_xw.sheets["Worksheet2"]
ws2_xw.api.RefreshAll()  # Refresh only Worksheet 2 data connections
ws2_xw.api.Calculate()   # Calculate Worksheet 2

# Save and close the workbook
wb_xw.save()
wb_xw.close()
app.quit()


import openpyxl
import win32com.client as win32

# Step 1: Load the Excel file and modify the cell F2 in Worksheet 1
file_path = "path_to_your_excel_file.xlsx"

# Load the workbook using openpyxl
wb = openpyxl.load_workbook(file_path)

# Access the first worksheet (Worksheet 1)
ws1 = wb['Worksheet1']

# Modify cell F2
ws1['F2'] = 'new_value'  # replace 'new_value' with what you want

# Save the workbook after modification
wb.save(file_path)

# Step 2: Refresh data and calculate Worksheet 1 and Worksheet 2 using pywin32
# Create Excel application object
excel = win32.Dispatch('Excel.Application')

# Open the workbook using Excel Application
wb_excel = excel.Workbooks.Open(file_path)

# Refresh all data connections
wb_excel.RefreshAll()

# Calculate Worksheet 1
ws1_excel = wb_excel.Sheets('Worksheet1')
ws1_excel.Calculate()

# Calculate Worksheet 2
ws2_excel = wb_excel.Sheets('Worksheet2')
ws2_excel.Calculate()

# Save and close the workbook
wb_excel.Save()
wb_excel.Close()

# Quit the Excel application
excel.Quit()


Sub ScrapeTablesWithClass()
    ' Tools needed:
    ' References to "Microsoft HTML Object Library" and "Microsoft XML, v6.0" must be added
    ' Go to Tools -> References -> Check the above libraries.

    Dim http As Object
    Dim html As Object
    Dim tableElements As Object
    Dim table As Object
    Dim tableClass As String
    Dim i As Integer
    
    ' Set the target URL and the table class you are looking for
    Dim url As String
    url = "https://example.com" ' Replace with your target URL
    tableClass = "your-table-class" ' Replace with the class of the table you are targeting
    
    ' Create a new XMLHTTP object to make the request
    Set http = CreateObject("MSXML2.XMLHTTP")
    
    ' Make the request to the website
    http.Open "GET", url, False
    http.send
    
    ' Create a new HTML Document object
    Set html = CreateObject("HTMLFILE")
    
    ' Load the response HTML into the HTMLDocument object
    html.body.innerHTML = http.responseText
    
    ' Get all table elements
    Set tableElements = html.getElementsByTagName("table")
    
    ' Loop through all table elements and check if they match the class
    i = 1
    For Each table In tableElements
        If table.className = tableClass Then
            Debug.Print "Table " & i & ":"
            Debug.Print table.outerHTML ' Display table HTML (for example purposes)
            i = i + 1
        End If
    Next table
    
    ' Clean up objects
    Set tableElements = Nothing
    Set html = Nothing
    Set http = Nothing
    
    MsgBox "Scraping Complete!"
End Sub
