import pandas as pd

# Example DataFrame
data = {'AccountID': [1, 2, 3, 4],
        'Volume': [300000, 350000, 650000, 400000]}
df = pd.DataFrame(data)

# Step 1: Calculate the sum (Grand Total) for numeric columns
grand_total = df.sum(numeric_only=True)

# Step 2: Convert the grand total into a row and append it
grand_total_row = pd.DataFrame(grand_total).T
grand_total_row['AccountID'] = 'Grand Total'

# Append the grand total row to the DataFrame
df_with_total = pd.concat([df, grand_total_row], ignore_index=True)

# Step 3: Add a column for the percentage each account represents of the total
total_volume = grand_total['Volume']
df_with_total['% of Total'] = (df_with_total['Volume'] / total_volume) * 100

# Step 4: Calculate percentage of total for each column and append it as a new row
percentage_row = (df_with_total.iloc[:-1, 1:] / total_volume) * 100  # Skip the Grand Total row to avoid division by itself
percentage_row = percentage_row.sum().to_frame().T  # Sum up for the entire row
percentage_row['AccountID'] = '% of Grand Total'

# Append the percentage row
df_final = pd.concat([df_with_total, percentage_row], ignore_index=True)

# Display the final DataFrame
print(df_final)
---


import os
from PyPDF2 import PdfReader, PdfWriter

# Path to the folder containing the PDFs
folder_path = 'path/to/your/pdf/folder'
output_pdf = 'filtered_merged_output.pdf'  # Name of the output merged PDF

# Create a PDF writer object to hold the merged content
writer = PdfWriter()

# Iterate over all files in the folder
for filename in os.listdir(folder_path):
    if filename.endswith('.pdf'):
        pdf_path = os.path.join(folder_path, filename)
        
        # Open each PDF file
        with open(pdf_path, 'rb') as pdf_file:
            reader = PdfReader(pdf_file)
            num_pages = len(reader.pages)

            # Logic for multi-page and single-page PDFs
            if num_pages > 1:
                # Iterate through each page and check for the text "term"
                for page_num in range(num_pages):
                    page = reader.pages[page_num]
                    page_text = page.extract_text()

                    # Include the page if it contains the word "term"
                    if "term" in page_text.lower():  # Case-insensitive search
                        writer.add_page(page)
            else:
                # If only one page, add it directly
                writer.add_page(reader.pages[0])

# Write the merged PDF to an output file
with open(output_pdf, 'wb') as output_file:
    writer.write(output_file)

print(f'Filtered merged PDF saved as {output_pdf}')

------

import xlwings as xw

# Open the Excel workbook
wb = xw.Book('your_file.xlsm')

# Access a specific sheet (by name or index)
sheet = wb.sheets['Sheet1']

# Modify the value of a specific cell (for example, A1)
sheet.range('A1').value = 'New Value'

# Refresh Bloomberg data by recalculating all Bloomberg formulas (equivalent to Ctrl + Alt + F9)
wb.app.api.Application.Run("blpRefreshAll")  # Calls Bloomberg refresh if Bloomberg API is loaded

# Alternatively, use Ctrl + Alt + F9 to fully recalculate all formulas, including Bloomberg
wb.app.api.SendKeys("^%{F9}")  # Ctrl + Alt + F9 for a full recalculation

# Trigger recalculation of all formulas in the workbook
wb.app.calculate()

# Save the workbook
wb.save()

# Close the workbook and quit the app
wb.close()
wb.app.quit()




import openpyxl
import win32com.client as win32

# Step 1: Open the Excel file and modify the specific cell
def modify_excel_cell(file_path, sheet_name, cell_ref, new_value):
    # Load the workbook and sheet
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook[sheet_name]
    
    # Modify the cell value
    sheet[cell_ref] = new_value
    
    # Save the changes
    workbook.save(file_path)
    workbook.close()

# Step 2: Refresh entire workbook with Bloomberg macro and recalculate sheets
def refresh_and_calculate(file_path):
    # Launch Excel and open the workbook
    excel_app = win32.Dispatch("Excel.Application")
    excel_app.Visible = False  # Keep Excel hidden in the background
    workbook = excel_app.Workbooks.Open(file_path)
    
    # Refresh the entire workbook (using the Bloomberg macro)
    excel_app.Run("RefreshEntireWorkbook")
    
    # Recalculate every sheet
    workbook.RefreshAll()  # Refresh data connections
    workbook.CalculateFull()  # Calculate all worksheets
    
    # Save and close the workbook
    workbook.Save()
    workbook.Close(False)
    excel_app.Quit()

# Example usage
file_path = "your_file.xlsx"
sheet_name = "Sheet1"
cell_ref = "A1"
new_value = "New Value"

# Modify the cell
modify_excel_cell(file_path, sheet_name, cell_ref, new_value)

# Refresh and calculate the entire workbook
refresh_and_calculate(file_path)

--

import openpyxl
import xlwings as xw

# Load the workbook using openpyxl
excel_file = "your_excel_file.xlsx"
wb = openpyxl.load_workbook(excel_file)

# Access Worksheet 1
ws1 = wb["Worksheet1"]
ws1["F2"] = "New Value"  # Change value of F2

# Save changes made with openpyxl
wb.save(excel_file)

# Now use xlwings to handle data refresh and calculation
app = xw.App(visible=False)  # Run in the background
wb_xw = app.books.open(excel_file)

# Access Worksheet 1
ws1_xw = wb_xw.sheets["Worksheet1"]
ws1_xw.api.RefreshAll()  # Refresh only Worksheet 1 data connections
ws1_xw.api.Calculate()   # Calculate Worksheet 1

# Access Worksheet 2
ws2_xw = wb_xw.sheets["Worksheet2"]
ws2_xw.api.RefreshAll()  # Refresh only Worksheet 2 data connections
ws2_xw.api.Calculate()   # Calculate Worksheet 2

# Save and close the workbook
wb_xw.save()
wb_xw.close()
app.quit()


import openpyxl
import win32com.client as win32

# Step 1: Load the Excel file and modify the cell F2 in Worksheet 1
file_path = "path_to_your_excel_file.xlsx"

# Load the workbook using openpyxl
wb = openpyxl.load_workbook(file_path)

# Access the first worksheet (Worksheet 1)
ws1 = wb['Worksheet1']

# Modify cell F2
ws1['F2'] = 'new_value'  # replace 'new_value' with what you want

# Save the workbook after modification
wb.save(file_path)

# Step 2: Refresh data and calculate Worksheet 1 and Worksheet 2 using pywin32
# Create Excel application object
excel = win32.Dispatch('Excel.Application')

# Open the workbook using Excel Application
wb_excel = excel.Workbooks.Open(file_path)

# Refresh all data connections
wb_excel.RefreshAll()

# Calculate Worksheet 1
ws1_excel = wb_excel.Sheets('Worksheet1')
ws1_excel.Calculate()

# Calculate Worksheet 2
ws2_excel = wb_excel.Sheets('Worksheet2')
ws2_excel.Calculate()

# Save and close the workbook
wb_excel.Save()
wb_excel.Close()

# Quit the Excel application
excel.Quit()


Sub ScrapeTablesWithClass()
    ' Tools needed:
    ' References to "Microsoft HTML Object Library" and "Microsoft XML, v6.0" must be added
    ' Go to Tools -> References -> Check the above libraries.

    Dim http As Object
    Dim html As Object
    Dim tableElements As Object
    Dim table As Object
    Dim tableClass As String
    Dim i As Integer
    
    ' Set the target URL and the table class you are looking for
    Dim url As String
    url = "https://example.com" ' Replace with your target URL
    tableClass = "your-table-class" ' Replace with the class of the table you are targeting
    
    ' Create a new XMLHTTP object to make the request
    Set http = CreateObject("MSXML2.XMLHTTP")
    
    ' Make the request to the website
    http.Open "GET", url, False
    http.send
    
    ' Create a new HTML Document object
    Set html = CreateObject("HTMLFILE")
    
    ' Load the response HTML into the HTMLDocument object
    html.body.innerHTML = http.responseText
    
    ' Get all table elements
    Set tableElements = html.getElementsByTagName("table")
    
    ' Loop through all table elements and check if they match the class
    i = 1
    For Each table In tableElements
        If table.className = tableClass Then
            Debug.Print "Table " & i & ":"
            Debug.Print table.outerHTML ' Display table HTML (for example purposes)
            i = i + 1
        End If
    Next table
    
    ' Clean up objects
    Set tableElements = Nothing
    Set html = Nothing
    Set http = Nothing
    
    MsgBox "Scraping Complete!"
End Sub
