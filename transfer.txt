# Modify the DataFrame style function to apply custom coloring with inline CSS
def color_cells(val):
    if pd.notnull(val) and val != 0:
        if val > 0:
            return 'background-color: rgba(0, 255, 0, {});'.format(abs(val)/5)
        else:
            return 'background-color: rgba(255, 0, 0, {});'.format(abs(val)/5)
    else:
        return ''

def color_cells_inline(val):
    if pd.notnull(val) and val != 0:
        if val > 0:
            return 'bgcolor="lightgreen"'
        else:
            return 'bgcolor="red"'
    else:
        return ''

# Apply the style function to the DataFrame (for visualization)
styled_df = df.style.applymap(color_cells, subset=pd.IndexSlice[7:10, df.columns[1:]])

# Convert the styled DataFrame to HTML
styled_html = styled_df.to_html()

# Convert the original DataFrame to HTML with inline CSS
html_with_inline_css = df.style.applymap(color_cells_inline, subset=pd.IndexSlice[7:10, df.columns[1:]]).render()

# Now 'html_with_inline_css' contains the HTML representation of your DataFrame
# with inline CSS for custom cell coloring for rows 7 to 9

# Use 'html_with_inline_css' in the email body
mail = createitem(0)
mail.htmlbody = html_with_inline_css
