import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Custom values for the boxplots
values = [1.5, 2, 3, 4, 4.5]

# Creating the figure and axis
fig, ax = plt.subplots()

# Creating the boxplots
boxplot = ax.boxplot([values, values, values], vert=True, widths=0.5, patch_artist=True)

# Customizing the boxplot colors
colors = ['lightblue', 'lightblue', 'lightblue']
for patch, color in zip(boxplot['boxes'], colors):
    patch.set_facecolor(color)

# Adding dashed lines within each box at 2.5 and 3.5
line1 = Line2D([0.75, 2.25], [2.5, 2.5], color='red', linestyle='dashed')
line2 = Line2D([0.75, 2.25], [3.5, 3.5], color='green', linestyle='dashed')
line3 = Line2D([0.75, 2.25], [3, 3], color='blue', linestyle='dashed')

for box in boxplot['boxes']:
    # Get the vertices (coordinates) of the box
    box_coords = box.get_path().vertices
    
    # Calculate the x-coordinate of the middle of the box
    mid_x = (box_coords[0, 0] + box_coords[2, 0]) / 2
    
    # Add dashed line within each box at y-coordinate 2.5, in red color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [2.5, 2.5], color='red', linestyle='dashed'))
    
    # Add dashed line within each box at y-coordinate 3.5, in green color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3.5, 3.5], color='green', linestyle='dashed'))
    
    # Add dashed line within each box at y-coordinate 3, in blue color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3, 3], color='blue', linestyle='dashed'))

# Setting the y-axis limits and ticks
ax.set_ylim(-5, 5)
ax.set_yticks([i / 10 for i in range(-50, 60, 10)])
ax.set_yticklabels([str(i / 10) for i in range(-50, 60, 10)])

# Setting the x-axis label
ax.set_xlabel('Box Plots')

# Adding a title
ax.set_title('Custom Vertical Box Plots with Dashed Lines Inside Boxes')

# Displaying the plot
plt.show()





import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Custom values for the boxplots
values = [1.5, 2, 3, 4, 4.5]

# Creating the figure and axis
fig, ax = plt.subplots()

# Creating the boxplots
boxplot = ax.boxplot([values, values, values], vert=True, widths=0.5, patch_artist=True)

# Customizing the boxplot colors
colors = ['lightblue', 'lightblue', 'lightblue']
for patch, color in zip(boxplot['boxes'], colors):
    patch.set_facecolor(color)

# Adding dashed lines within each box at 2.5 and 3.5
line1 = Line2D([0.75, 2.25], [2.5, 2.5], color='red', linestyle='dashed')
line2 = Line2D([0.75, 2.25], [3.5, 3.5], color='green', linestyle='dashed')
line3 = Line2D([0.75, 2.25], [3, 3], color='blue', linestyle='dashed')

for box in boxplot['boxes']:
    # Get the vertices (coordinates) of the box
    box_coords = box.get_path().vertices
    
    # Calculate the x-coordinate of the middle of the box
    mid_x = (box_coords[0, 0] + box_coords[2, 0]) / 2
    
    # Add dashed line within each box at y-coordinate 2.5, in red color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [2.5, 2.5], color='red', linestyle='dashed'))
    # Add value label for the middle line
    ax.text(mid_x + 0.3, 2.5, '3', color='red', fontsize=8, verticalalignment='center')

    # Add dashed line within each box at y-coordinate 3.5, in green color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3.5, 3.5], color='green', linestyle='dashed'))
    # Add value label for the middle line
    ax.text(mid_x + 0.3, 3.5, '4', color='green', fontsize=8, verticalalignment='center')

    # Add dashed line within each box at y-coordinate 3, in blue color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3, 3], color='blue', linestyle='dashed'))
    # Add value label for the middle line
    ax.text(mid_x + 0.3, 3, '3', color='blue', fontsize=8, verticalalignment='center')

# Setting the y-axis limits and ticks
ax.set_ylim(-5, 5)
ax.set_yticks([i / 10 for i in range(-50, 60, 10)])
ax.set_yticklabels([str(i / 10) for i in range(-50, 60, 10)])

# Setting the x-axis label
ax.set_xlabel('Box Plots')

# Adding a title
ax.set_title('Custom Vertical Box Plots with Dashed Lines Inside Boxes')

# Displaying the plot
plt.show()


for box in boxplot['boxes']:
    # Get the vertices (coordinates) of the box
    box_coords = box.get_path().vertices
    
    # Calculate the x-coordinate of the middle of the box
    mid_x = (box_coords[0, 0] + box_coords[2, 0]) / 2
    
    # Add value label for the top line
    ax.text(mid_x + 0.3, 4.5, '4.5', color='black', fontsize=8, verticalalignment='center')
    
    # Add value label for the bottom line
    ax.text(mid_x + 0.3, 1.5, '1.5', color='black', fontsize=8, verticalalignment='center')

##########################
Sub CreateTableFromRange()
    Dim ws As Worksheet
    Dim rng As Range
    Dim tbl As ListObject
    
    ' Set the worksheet object
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Replace "Sheet1" with your actual sheet name
    
    ' Set the range object
    Set rng = ws.Range("A10:D20") ' Replace "A10:D20" with your custom range
    
    ' Create the table
    Set tbl = ws.ListObjects.Add(xlSrcRange, rng, , xlYes) ' xlYes specifies that the range has headers
    
    ' Optional: Set the table name
    tbl.Name = "MyTable" ' Replace "MyTable" with your desired table name
End Sub

in vba, i want to write a large if statement and want to refactor it to be more efficient and readable. there are three variables: d1, d2, d3. these variables can either be empty or not empty. we will look at if the variables have data. there are 7 potential scenarios where the variables could have data:
just d1
just d2
just d3
d1, d2
d1, d3
d2, d3
d1, d2, d3
write the code for this that is simple, readable, and efficient. for now, you can keep leave the body of if statement blank


Select Case True
    Case Not IsEmpty(d1) And IsEmpty(d2) And IsEmpty(d3)
        ' Scenario: just d1
        ' Code for this scenario
    Case IsEmpty(d1) And Not IsEmpty(d2) And IsEmpty(d3)
        ' Scenario: just d2
        ' Code for this scenario
    Case IsEmpty(d1) And IsEmpty(d2) And Not IsEmpty(d3)
        ' Scenario: just d3
        ' Code for this scenario
    Case Not IsEmpty(d1) And Not IsEmpty(d2) And IsEmpty(d3)
        ' Scenario: d1, d2
        ' Code for this scenario
    Case Not IsEmpty(d1) And IsEmpty(d2) And Not IsEmpty(d3)
        ' Scenario: d1, d3
        ' Code for this scenario
    Case IsEmpty(d1) And Not IsEmpty(d2) And Not IsEmpty(d3)
        ' Scenario: d2, d3
        ' Code for this scenario
    Case Not IsEmpty(d1) And Not IsEmpty(d2) And Not IsEmpty(d3)
        ' Scenario: d1, d2, d3
        ' Code for this scenario
End Select

