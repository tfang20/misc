import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Custom values for the boxplots
values = [1.5, 2, 3, 4, 4.5]

# Creating the figure and axis
fig, ax = plt.subplots()

# Creating the boxplots
boxplot = ax.boxplot([values, values, values], vert=True, widths=0.5, patch_artist=True)

# Customizing the boxplot colors
colors = ['lightblue', 'lightblue', 'lightblue']
for patch, color in zip(boxplot['boxes'], colors):
    patch.set_facecolor(color)

# Adding dashed lines within each box at 2.5 and 3.5
line1 = Line2D([0.75, 2.25], [2.5, 2.5], color='red', linestyle='dashed')
line2 = Line2D([0.75, 2.25], [3.5, 3.5], color='green', linestyle='dashed')
line3 = Line2D([0.75, 2.25], [3, 3], color='blue', linestyle='dashed')

for box in boxplot['boxes']:
    # Get the vertices (coordinates) of the box
    box_coords = box.get_path().vertices
    
    # Calculate the x-coordinate of the middle of the box
    mid_x = (box_coords[0, 0] + box_coords[2, 0]) / 2
    
    # Add dashed line within each box at y-coordinate 2.5, in red color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [2.5, 2.5], color='red', linestyle='dashed'))
    
    # Add dashed line within each box at y-coordinate 3.5, in green color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3.5, 3.5], color='green', linestyle='dashed'))
    
    # Add dashed line within each box at y-coordinate 3, in blue color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3, 3], color='blue', linestyle='dashed'))

# Setting the y-axis limits and ticks
ax.set_ylim(-5, 5)
ax.set_yticks([i / 10 for i in range(-50, 60, 10)])
ax.set_yticklabels([str(i / 10) for i in range(-50, 60, 10)])

# Setting the x-axis label
ax.set_xlabel('Box Plots')

# Adding a title
ax.set_title('Custom Vertical Box Plots with Dashed Lines Inside Boxes')

# Displaying the plot
plt.show()





import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Custom values for the boxplots
values = [1.5, 2, 3, 4, 4.5]

# Creating the figure and axis
fig, ax = plt.subplots()

# Creating the boxplots
boxplot = ax.boxplot([values, values, values], vert=True, widths=0.5, patch_artist=True)

# Customizing the boxplot colors
colors = ['lightblue', 'lightblue', 'lightblue']
for patch, color in zip(boxplot['boxes'], colors):
    patch.set_facecolor(color)

# Adding dashed lines within each box at 2.5 and 3.5
line1 = Line2D([0.75, 2.25], [2.5, 2.5], color='red', linestyle='dashed')
line2 = Line2D([0.75, 2.25], [3.5, 3.5], color='green', linestyle='dashed')
line3 = Line2D([0.75, 2.25], [3, 3], color='blue', linestyle='dashed')

for box in boxplot['boxes']:
    # Get the vertices (coordinates) of the box
    box_coords = box.get_path().vertices
    
    # Calculate the x-coordinate of the middle of the box
    mid_x = (box_coords[0, 0] + box_coords[2, 0]) / 2
    
    # Add dashed line within each box at y-coordinate 2.5, in red color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [2.5, 2.5], color='red', linestyle='dashed'))
    # Add value label for the middle line
    ax.text(mid_x + 0.3, 2.5, '3', color='red', fontsize=8, verticalalignment='center')

    # Add dashed line within each box at y-coordinate 3.5, in green color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3.5, 3.5], color='green', linestyle='dashed'))
    # Add value label for the middle line
    ax.text(mid_x + 0.3, 3.5, '4', color='green', fontsize=8, verticalalignment='center')

    # Add dashed line within each box at y-coordinate 3, in blue color
    ax.add_line(Line2D([mid_x - 0.25, mid_x + 0.25], [3, 3], color='blue', linestyle='dashed'))
    # Add value label for the middle line
    ax.text(mid_x + 0.3, 3, '3', color='blue', fontsize=8, verticalalignment='center')

# Setting the y-axis limits and ticks
ax.set_ylim(-5, 5)
ax.set_yticks([i / 10 for i in range(-50, 60, 10)])
ax.set_yticklabels([str(i / 10) for i in range(-50, 60, 10)])

# Setting the x-axis label
ax.set_xlabel('Box Plots')

# Adding a title
ax.set_title('Custom Vertical Box Plots with Dashed Lines Inside Boxes')

# Displaying the plot
plt.show()


for box in boxplot['boxes']:
    # Get the vertices (coordinates) of the box
    box_coords = box.get_path().vertices
    
    # Calculate the x-coordinate of the middle of the box
    mid_x = (box_coords[0, 0] + box_coords[2, 0]) / 2
    
    # Add value label for the top line
    ax.text(mid_x + 0.3, 4.5, '4.5', color='black', fontsize=8, verticalalignment='center')
    
    # Add value label for the bottom line
    ax.text(mid_x + 0.3, 1.5, '1.5', color='black', fontsize=8, verticalalignment='center')

##########################
Sub CreateTableFromRange()
    Dim ws As Worksheet
    Dim rng As Range
    Dim tbl As ListObject
    
    ' Set the worksheet object
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Replace "Sheet1" with your actual sheet name
    
    ' Set the range object
    Set rng = ws.Range("A10:D20") ' Replace "A10:D20" with your custom range
    
    ' Create the table
    Set tbl = ws.ListObjects.Add(xlSrcRange, rng, , xlYes) ' xlYes specifies that the range has headers
    
    ' Optional: Set the table name
    tbl.Name = "MyTable" ' Replace "MyTable" with your desired table name
End Sub

in vba, i have a filtered table. i want to use subtotal to calculate the mean of column C with the table filters. Show me how to do this

//
Sub FindLastRowOfFilteredTable()
    Dim lastRow As Long
    Dim filteredRange As Range
    
    ' Assuming your table is in column A
    Set filteredRange = Range("A:A").SpecialCells(xlCellTypeVisible)
    
    If Not filteredRange Is Nothing Then
        lastRow = filteredRange.Cells(filteredRange.Cells.Count).Row
        MsgBox "The last row of the filtered table is: " & lastRow
    Else
        MsgBox "No visible cells found in the filtered table."
    End If
End Sub

//
Sub FindLastRowOfFilteredTable()
    Dim lastRow As Long
    Dim tbl As ListObject
    Dim rng As Range
    
    ' Assuming your table is named "Table1"
    Set tbl = ThisWorkbook.Sheets("Sheet1").ListObjects("Table1")
    
    If tbl.AutoFilter.FilterMode Then
        Set rng = tbl.DataBodyRange.SpecialCells(xlCellTypeVisible)
        
        If Not rng Is Nothing Then
            lastRow = rng.Cells(rng.Cells.Count).Row
            MsgBox "The last row of the filtered table is: " & lastRow
        Else
            MsgBox "No visible cells found in the filtered table."
        End If
    Else
        MsgBox "The table is not filtered."
    End If
End Sub

i have an excel with multiple tables. using python, i want to access the excel file, but only take a certain table to create a dataframe. the specific table range is in sheet2, M1:T4.
